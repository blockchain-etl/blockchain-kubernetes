apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "binancechain.fullname" . }}
  labels:
{{ include "binancechain.labels" . | indent 4 }}
spec:
  serviceName: "{{ .Release.Name }}-service"
  replicas: {{ .Values.replicaCount }} # by default is 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "binancechain.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "binancechain.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/configmap.yaml: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret.yaml: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        envFrom:
        - secretRef:
            name: "{{ .Release.Name }}-env"
        # we have to ignore image entrypoint
        command:
          - /bin/sh
          - -c
          - exec /node-binary/fullnode/${BNET}/${BVER}/linux/bnbchaind start --home {{ .Values.binancechain.base_path }}
        workingDir: "{{ .Values.binancechain.base_path }}"
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: {{ .Values.service.rpcPort }}
          name: "{{ .Values.service.rpcPortName }}"
          protocol: "TCP"
        - containerPort: {{ .Values.service.p2pPort }}
          name: "{{ .Values.service.p2pPortName }}"
          protocol: "TCP"
        volumeMounts:
        - name: binancechain-pvc
          mountPath: {{ .Values.binancechain.base_path }}
        - name: scripts
          mountPath: /scripts
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - /scripts/check_node_health.sh
              - "{{ .Values.binancechain.base_path }}"
              - "{{ .Values.binancechain.maxHealthyAge }}"
              - last_synced_block.txt
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
      initContainers:
      {{- if .Values.binancechain_copy_config }}
      - name: binancechain-copy-configs
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c", "mkdir -p {{ .Values.binancechain.base_path }}/{{ .Values.binancechain.config_path }} && cp /node-binary/fullnode/${BNET}/${BVER}/config/genesis.json
{{ .Values.binancechain.base_path }}/{{ .Values.binancechain.config_path }}/genesis.json && cp /config/* {{ .Values.binancechain.base_path }}/{{ .Values.binancechain.config_path }}",]
        envFrom:
          - secretRef:
              name: "{{ .Release.Name }}-env"
        volumeMounts:
          - name: binancechain-pvc
            mountPath: {{ .Values.binancechain.base_path }}
          - name: config
            mountPath: /config
      {{- end }}
      volumes:
      - name: scripts
        configMap:
          name: "{{ .Release.Name }}-scripts"
      - name: config
        secret:
          secretName: "{{ .Release.Name }}-config"
  volumeClaimTemplates:
  - metadata:
      name: binancechain-pvc
    spec:
      accessModes:
        - {{.Values.persistence.accessMode }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      volumeMode: Filesystem
