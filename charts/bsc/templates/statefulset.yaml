apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "bsc.fullname" . }}
  labels:
{{ include "bsc.labels" . | indent 4 }}
spec:
  serviceName: "{{ .Release.Name }}-service"
  replicas: {{ .Values.replicaCount }} # by default is 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "bsc.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      bsc/chain: {{ .Values.bsc.chain }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "bsc.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        bsc/chain: {{ .Values.bsc.chain }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.bscCmdOverride }}
        command: [ "{{ .Values.bscCmd }}" ]
        {{- end }}
        args:
          - --config=/config/config.toml
          - --datadir={{ .Values.bsc.base_path }}
          - --syncmode={{ .Values.bsc.syncmode }}
          - --gcmode={{ .Values.bsc.gcmode }}
          - --rpc
          - --rpcaddr=0.0.0.0
          - --rpcport={{ .Values.service.rpcPort }}
          - --rpcapi="{{ .Values.bsc.rpcApi }}"
          - --rpcvhosts="{{ .Values.bsc.rpcVhosts }}"
          - --ws
          - --wsaddr=0.0.0.0
          - --wsport={{ .Values.service.wsPort }}
          - --wsapi="{{ .Values.bsc.wsApi }}"
          - --wsorigins="{{ .Values.bsc.wsOrigins }}"
          - --graphql
          - --graphql.addr=0.0.0.0
          - --graphql.port={{ .Values.service.graphQlPort }}
          - --graphql.vhosts="{{ .Values.bsc.graphQlVhosts }}"
          - --maxpeers={{ .Values.bsc.maxpeers }}
          - --cache={{ .Values.bsc.cache }}
          - --port={{ .Values.service.p2pPort0 }}
          {{- if and .Values.externalLBp2p .Values.externalLBp2pIP }}
          - --nat=extip:{{- .Values.externalLBp2pIP -}}
          {{- end }}
        workingDir: "{{ .Values.bsc.base_path }}"
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
          {{- range $val := .Values.service.ports }}
        - containerPort: {{ $val.port }}
          name: "{{ $val.name }}"
          protocol: {{ $val.protocol | default "TCP" }}
          {{- end }}
        volumeMounts:
        - name: bsc-config
          mountPath: /config
        - name: scripts
          mountPath: /scripts
        - name: bsc-pvc
          mountPath: {{ .Values.bsc.base_path }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - /scripts/check_node_health.sh
            - http://127.0.0.1:{{ .Values.service.rpcPort }}
            - "300"
            - last_synced_block.txt
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
      - name: logger
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: [ "tail","-F","{{ .Values.bsc.base_path }}/bsc.log" ]
        workingDir: "{{ .Values.bsc.base_path }}"
        volumeMounts:
          - name: bsc-pvc
            mountPath: {{ .Values.bsc.base_path }}
            readOnly: true
      initContainers:
      {{- if .Values.init_genesis }}
      - name: init
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c", "wget -O /tmp/genesis.json
        https://github.com/binance-chain/smart-chain-binary/raw/master/bsc/fullnode/config/genesis.json &&
        geth --datadir={{ .Values.bsc.base_path }} init /tmp/genesis.json"]
        volumeMounts:
          - name: bsc-pvc
            mountPath: {{ .Values.bsc.base_path }}
      {{- end }}
      volumes:
        - name: bsc-config
          configMap:
            name: "{{ .Release.Name }}-config"
        - name: scripts
          configMap:
            name: "{{ .Release.Name }}-scripts"
  volumeClaimTemplates:
    - metadata:
        name: bsc-pvc
      spec:
        accessModes:
        - {{.Values.persistence.accessMode }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        volumeMode: Filesystem
